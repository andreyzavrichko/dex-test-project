plugins {
    id 'java'
    id "io.qameta.allure" version "2.9.6"
}

repositories {
    mavenCentral()
}

allure {
    report {
        version.set("2.17.2")
    }
    adapter {
        autoconfigure.set(true)
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.17.2")
            }
        }
    }
}

def selenideVersion = '6.10.1',
    junitVersion = '5.9.0',
    fakerVersion = "1.0.2",
    slf4jVersion = '2.0.5',
    allureVersion = '2.20.0',
    pdfVersion = "1.7.0",
    xlsVersion = '1.6.0',
    assertjVersion = '3.23.1',
    csvVersion = '5.7.1'



dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.github.javafaker:javafaker:$fakerVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:pdf-test:$pdfVersion",
            "com.codeborne:xls-test:$xlsVersion",
            "com.opencsv:opencsv:$csvVersion",
            "commons-io:commons-io:2.11.0"
    )

    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
            'com.browserup:browserup-proxy-core:2.1.2')

}



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}